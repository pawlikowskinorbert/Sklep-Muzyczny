@using Project.Helpers
@using Project.Specifications
@using Microsoft.AspNetCore.Mvc.Rendering
@model ProductListViewModel




@{
    string sortText;
    switch (ViewBag.CurrentSort)
    {
        case "priceasc":
            sortText = "Price Ascending";
            break;
        case "pricedesc":
            sortText = "Price Descending";
            break;
        case "nameasc":
            sortText = "Name A-Z";
            break;
        case "namedesc":
            sortText = "Name Z-A";
            break;
        default:
            sortText = "None";
            break;
    }
}


<div class="container " style="margin-top: 100px;">
    <form method="get" class="d-flex flex-wrap">
        <!-- Search field -->
        <div class="form-group me-2">
            @Html.Label("Search", "Szukaj")
            @Html.TextBox("Search", Model.SpecParams.Search, new { @class = "form-control", placeholder = "Szukaj..." })
        </div>
    
        <div class="form-group me-2">
            @Html.Label("CategoryId", "Kategorie")
            @Html.DropDownList("CategoryId", Model.Categories, "Wszystkie", new { @class = "form-control" })
        </div>
    
        <!-- Brand filter -->
        <div class="form-group me-2">
            @Html.Label("BrandId", "Marka")
            @Html.DropDownList("BrandId", Model.Brands, "Wszystkie", new { @class = "form-control" })
        </div>
    
        <!-- Type filter -->
        <div class="form-group me-2">
            @Html.Label("TypeId", "Typ")
            @Html.DropDownList("TypeId", Model.Types, "Wszystkie", new { @class = "form-control" })
        </div>
    
        <!-- Sorting -->
        <div class="form-group me-2">
            @Html.Label("Sort", "Sortuj")
            @Html.DropDownList("Sort", new SelectList(
                     new List<SelectListItem>
            {
            new SelectListItem { Text = "Brak", Value = "" },
            new SelectListItem { Text = "Cena Rosnąco", Value = "priceasc" },
            new SelectListItem { Text = "Cena Malejąco", Value = "pricedesc" },
            new SelectListItem { Text = "Nazwa A-Z", Value = "nameasc" },
            new SelectListItem { Text = "Nazwa Z-A", Value = "namedesc" }
            }, "Value", "Text", Model.SpecParams.Sort), "Wybierz", new { @class = "form-control" })
        </div>
    
        <!-- Submit and Clear buttons -->
        <button type="submit" class="btn btn-primary me-2">Wprowadź filtry</button>
        <button type="button" class="btn btn-danger" onclick="window.location.href='@Url.Action("Index", "Product")'">Usuń Filtry</button>
    </form>
    
    <script>
        function setDropdownText(text) {
            document.getElementById("dropdownMenuButton").textContent = text;
        }
    </script>
    
    
    
    
    <h3>Produkty: </h3>
    
    <form action="">
        <table class="table table-responsive table-hover">
            @if (Model.Pagination.Data.Any())
            {
                <thead>
                    <tr class="table-active">
                        <th>Id</th>
                        <th>Nazwa</th>
                        <th>Opis</th>
                        <th>Zdjęcie</th>
                        <th>Cena</th>
                        <th>Marka</th>
                        <th>Typ Produktu</th>
                        <th>Przycisk Akcji</th>
                    </tr>
                </thead>
            }
    
            <tbody>
                @if (Model.Pagination.Data.Any())
                {
                    @foreach (var product in Model.Pagination.Data)
                    {
    
                        <tr>
                            <td>@product.Id </td>
                            <td><a href="Product/Details/@product.Id">@product.Name</a></td>
                            <td>@product.Description</td>
                            <td><img src="@Url.Content(product.PhotoUrl)" alt="Product Image"
                                    style="width: 100px; padding-right: 30px; height: auto;"></td>
                            <td>@product.Price $</td>
                            <td>@(product.Brand?.Name ?? "Unknown")</td>
                            <td>@(product.ProductType?.Name ?? "Unknown")</td>

                            @if (User.IsInRole("Admin") || User.IsInRole("Pracownik"))
                            {
                                <td class=" mt-4 pb-5 d-flex justify-content-center align-items-center">
                                    <a asp-action="Edit" class="btn btn-sm btn-primary" asp-route-id="@product.Id">Edytuj</a>
                                    <a href="#" 
                                        class="btn btn-sm btn-danger delete-btn" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#deleteModal" 
                                        data-url="@Url.Action("GetDeleteModal", "Admin", new { id = product.Id })">
                                        Usuń
                                    </a>
                                </td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <div class="alert alert-warning text-center" role="alert">
                        No items was found : (
                    </div>
                }
    
            </tbody>
        </table>
    
        @if (User.IsInRole("Admin") || User.IsInRole("Pracownik"))
        {
            <p>
                <a asp-action="Create" class="btn btn-primary">Dodaj Nowy Produkt</a>
            </p>
        }
    </form>
</div>

<div id="deleteModalContainer"></div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Kliknięcie przycisku "Usuń"
            $('.delete-btn').on('click', function (e) {
                e.preventDefault();

                var url = $(this).data('url');

                // Pobierz zawartość modala z serwera
                $.get(url, function (data) {
                    $('#deleteModalContainer').html(data);
                    $('#deleteModal').modal('show');
                });
            });
        });
    </script>
}

@await Html.PartialAsync("_Pagination", Model.Pagination)
